{"noir_version":"0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab","hash":12761440753018246609,"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},"error_types":{}},"bytecode":"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","debug_symbols":"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","file_map":{"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"71":{"source":"use std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/Users/joshuatrujillo/Documents/github/zk/noir/keccak256/src/keccak256.nr"},"72":{"source":"use crate::keccak256::keccak256;\n\n#[export]\nfn test_keccak256_0() -> [u8; 32] {\n    keccak256([], 0)\n}\n\n#[export]\nfn test_keccak256_1(input: [u8; 1], len: u32) -> [u8; 32] {\n    keccak256(input, len)\n}\n\n#[export]\nfn test_keccak256_100(input: [u8; 100], len: u32) -> [u8; 32] {\n    keccak256(input, len)\n}\n\n// TODO: uncomment once keccak works with 135+ bytes\n//\n// #[export]\n// fn test_keccak256_135(input: [u8; 135], len: u32) -> [u8; 32] {\n//     keccak256(input, len)\n// }\n\n#[test]\nfn smoke_test() {\n    let input = [0xbd];\n    let result = [\n        0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19, 0x37,\n        0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca, 0x4b, 0x3b,\n        0x1a, 0xbf,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n\n#[test]\nfn hash_hello_world() {\n    let input = \"Hello world!\".as_bytes();\n    let result = [\n        0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n        0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n        0xea, 0xab,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n\n#[test]\nfn var_size_hash() {\n    let input = [\n        189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,\n        207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,\n    ];\n    let result = [\n        226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170, 219,\n        171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n    ];\n    assert_eq(keccak256(input, 13), result);\n}\n\n#[test]\nfn hash_longer_than_136_bytes() {\n    let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n        .as_bytes();\n    assert(input.len() > 136);\n\n    let result = [\n        0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n        0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55, 0xe4,\n        0x40,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n","path":"/Users/joshuatrujillo/Documents/github/zk/noir/keccak256/src/tests.nr"}},"names":["test_keccak256_0"],"brillig_names":["test_keccak256_0"]}