{"noir_version":"0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab","hash":8954457236901434143,"abi":{"parameters":[{"name":"input","type":{"kind":"array","length":1,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},"error_types":{}},"bytecode":"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","debug_symbols":"1d3Bbts4EMbxd/E5Bw5nOEP2VRaLIm3TwkCQFE26wKLIu6/ajeVWDKzD5H/IJZAT5gfC5idRJE39OHy6+fD9y/vj3ef7h8O7v34cbu8/Xj8e7++WVz+erg4fvh1vb49f3v/+60P5+cPqr/IPX6/vfr58eLz+9nh4J9GvDjd3n5ajMZb//3y8vTm8i/p0NRU1Lc9FzeJcVJ7+vjqYkriReCNxJ/Eg8Z7EfcVdZYsPEG+FxIXEK4kriRuJNxJ3Eg8SJxPayIQ6mVAnE+pkQp1MqJMJdTKhTibUyYQ6mdDINsXQeC4aNrZ49gMVKeNUVky3vLN8sHxn+YHyveT5tay4b3lJ88NPZatOta8sryxvLN9Y3lk+WL6z/ED5kU5ttbLy3ra8sHxleWV5Y/nG8s7ywfKd5QfKSymwL7BfYV9h32A/n91+6oWLlj75DvsB+x328/mNdva3t0FLVxf2BfYr7CvsG+w32HfYD9jvsJ/Or8l6fjCZzg+1wL7AfoV9hX2D/Qb7DvsB+x324fwqnF+F86twfhXOr8L5VTi/CudX4fwqnF+F85teoiCtrKNirU73X+m5fum+jpX3KJMvsF9hX2HfYL/BvsN+wH6H/cH6DufX4fw6nF+H8+twfh3Or8P5dTi/DufX4fymFyHUEqfrey1DJj/bflRCn8suhzb5DvsB+x32B+unFyPs+QL7FfYV9g324fx2OL8dzm+H89vh/A44vwPO74DzO+D8Dji/I99+Rqz+2I4P1PT8smo99R9Up7VutRhc//T5rdbT/PJyOPsO+wH7HfYH66fnf/d8gf36mr7G5KfPbzXOfv9jMekLNwtDT5OJdbTzzUL1Fwq30uW5cCu/VWMp/Kvm9mZr3t5szf3N1jzebM37W615em5dVdaaq2zHFmp6bnqn75Gem97zHfaD9dNzuzufr+bbj659Y9Xp2qoV9hX2DfYb7DvsB+x32B+v6Vvd+lZgX2C/wn4+v3Y+fzaffIP9BvsO+wH7HfYH67fCXt+bwD48dtQU9uH+Z4P7nw3ufza4/9k67A/Wdzi/DufX4fw6nF+H8+twftNrD5bRy9P913I4XV8i+/4v45n15NcxjT2m59b3/A772fPDcod4Gj9ZDsfWT8+t7/kC+xX2FfYN9hvsO+yn87t0alc/2uR32B+sPwrsC+xX2FfYN9hvr+pP+RoO+wH7Hfbz+bX1+q59uzZSS4F9gf0K+wr7BvsN9l/1+vuCn8/vujZgOeyT32F/sL4U2BfYr7CvsG+w32DfYR/Or8D5FTi/Fc5vhfNb4fym5/erWF/Hf3w7vqQKvz/p+fdlhs5OvrU6+Qr7BvsN9h32A/Y77A/WT8+/7/kC+3B+Dc6vwfk1OL8G59fg/Kbnr3euX+n56z0/3f7P302oVWZfYd9gv8G+w37Afof99PVL+jr+JmP73SL1AvsC+xX2FfYN9hvsO+wH7HfYh/MbcH4Dzm/A+Q04vwHnN/8UhdZO62OlTQ8K0PxjFHb8wfr5Byns+AL7FfYV9g3203vXtGGrP9rkO+wH7Kfz6+e943zaO07zT1S47OcfqbDjp9u/n/ce9+kRPZrf2D/Wxwsth3P9A/bT7SfOZWPaO0jze/tf9C2/t/+Onz7/R1v3bopp/Ynl9/bf8RX2DfYb7DvsB+x32B+sn9/bf8eH8ytwfgXOr8D5FTi/Auc3vzf+xf6D5ffG3/EF9tPt34es73+Z3v/83vg7vsF+g/10+/c4t//ikx+w32F/sH5+b/wdX2C/wr6+pi9T+8/vje9hZ3+ufz6/ftF32A/Yz/c/L92fWn5v/Mu+FdgX2K+wr7Cfbf+XHqBs6dUPsW6OFH3WO6oPUk+v27isC6pXVFdUz16vYj0dLwNXk95Q3VE9UL2j+iD19BqNy7qgekV1RXU0q45m1dGsOppVR7PqXFafllf/XH87Xn+4vXlY/uPnH7/ffXw83t89v3z89+v/f1kK/wc=","file_map":{"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"71":{"source":"use std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/Users/joshuatrujillo/Documents/github/zk/noir/keccak256/src/keccak256.nr"},"72":{"source":"use crate::keccak256::keccak256;\n\n#[export]\nfn test_keccak256_0() -> [u8; 32] {\n    keccak256([], 0)\n}\n\n#[export]\nfn test_keccak256_1(input: [u8; 1], len: u32) -> [u8; 32] {\n    keccak256(input, len)\n}\n\n#[export]\nfn test_keccak256_100(input: [u8; 100], len: u32) -> [u8; 32] {\n    keccak256(input, len)\n}\n\n// TODO: uncomment once keccak works with 135+ bytes\n//\n// #[export]\n// fn test_keccak256_135(input: [u8; 135], len: u32) -> [u8; 32] {\n//     keccak256(input, len)\n// }\n\n#[test]\nfn smoke_test() {\n    let input = [0xbd];\n    let result = [\n        0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19, 0x37,\n        0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca, 0x4b, 0x3b,\n        0x1a, 0xbf,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n\n#[test]\nfn hash_hello_world() {\n    let input = \"Hello world!\".as_bytes();\n    let result = [\n        0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n        0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n        0xea, 0xab,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n\n#[test]\nfn var_size_hash() {\n    let input = [\n        189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,\n        207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,\n    ];\n    let result = [\n        226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170, 219,\n        171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n    ];\n    assert_eq(keccak256(input, 13), result);\n}\n\n#[test]\nfn hash_longer_than_136_bytes() {\n    let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n        .as_bytes();\n    assert(input.len() > 136);\n\n    let result = [\n        0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n        0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55, 0xe4,\n        0x40,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n","path":"/Users/joshuatrujillo/Documents/github/zk/noir/keccak256/src/tests.nr"}},"names":["test_keccak256_1"],"brillig_names":["test_keccak256_1"]}