{"noir_version":"0.36.0+801c71880ecf8386a26737a5d8bb5b4cb164b2ab","hash":18089526335356655421,"abi":{"parameters":[{"name":"input","type":{"kind":"array","length":100,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},"error_types":{}},"bytecode":"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","debug_symbols":"1d3BThw5EMbxd5lzDi5XucrmVVarCBISjYQgArLSCvHu22SZnmSMpg/F/8AFzYD5yRr8dbttYz/tvl5f/fz+eX/77e5hd/HX0+7m7svl4/7udnn39Pxpd3W/v7nZf//8+7d35eWLmPz6hYcfl7cv7x8eL+8fdxe1y6fd9e3X3YWWugDf9jfXu4tYXk5FTctrUbM4FpXnvz8tekV1RXVD9YbqjuqR1H3VXWXSO6oPUm8F1QXVK6orqhuqN1R3VEez2tCsNjSrjmbV0aw6mlVHs+poVh3NqqNZdTSrkW0zofFaNGxMevZzFynjtawsPbvJd9gP2O+wP1i/l7zfV9998iXtDz/4Vef6V9hX2DfYb7DvsB+w32F/sP5I57daWX1vky+wX2FfYd9gv8G+w37Afof9gfq1FNgX2K+wr7BvsJ/Pbz90z0VLn3yH/YD9Dvv5/EY7+qfPR1UK7AvsV9hX2DfYb7DvsB+w32E/nV+T9fpgMl0faoF9gf0K+wr7BvsN9h32A/Y77MP5VTi/CudX4fwqnF+F86twfhXOr8L5VTi/Cuc3veZgmZtfx8danZ6/0jP3ywjnOn7eo0y+wH6FfYV9g/0G+w77Afsd9gfrO5xfh/PrcH4dzq/D+XU4vw7n1+H8Opxfh/ObXp2wjEAe7u/LYJ5Mfrb9qIQeykrY5DvsB+x32B+sn16fsOUL7FfYV9g32Ifz2+H8dji/Hc5vh/M74PwOOL8Dzu+A8zvg/I58+xmx+uN0fEDT88uq9dB/UJ3Wv2kxuP7p69syRXEou4zWTr7DfsB+h/3B+un53y1fYL++p68x+enrW42j3/9YX/rGw8LQw2RiHe34sFD9jcKtrLVoZYzfC/+quX3YmrcPW3P/sDWPD1vz/lFrnp5b1+XyvfYN5HRsQdNz0xt9j/Tc9JbvsB+sn57b3fj7ar796No3Vp3urVphX2HfYL/BvsN+wH6H/fGevtVT3wrsC+xX2M/n147Xz+aTb7DfYN9hP2C/w/5g/VbY+3sT2IfHjprCPtz/bHD/s8H9zwb3P1uH/cH6DufX4fw6nF+H8+twfh3Ob3rtQZX1+Wt5Od1fIvv5L+OZ9eDXMY09pufWt/wO+9nrQ10ecQ/+0ts/9dNz61u+wH6FfYV9g/0G+w776fwuXZDVjzb5HfYH648C+wL7FfYV9g3227v6U76Gw37Afof9fH5tvb8vd9sT30qBfYH9CvsK+wb7Dfbf9f77hp/P77o2YHnZJ7/D/mB9KbAvsF9hX2HfYL/BvsM+nF+B8ytwfiuc3wrnt8L5Tc/vV7G+jv/46fiSKfz5pOffq6kdfGt18hX2DfYb7DvsB+x32B+sn55/3/IF9uH8Gpxfg/NrcH4Nzq/B+U3PX2/cv9Lz11t+uv0f/zehVpl9hX2D/Qb7DvsB+x320/cv6ev4m4zT/y0yL7AvsF9hX2HfYL/BvsN+wH6HfTi/Aec34PwGnN+A8xtwfvNnK7R2WB8rbTo7wPJnK2z4g/XzZyts+AL7FfYV9g3203vXtGGrP9rkO+wH7Kfz68e943zaO87yZyuc9/NnK2z46fbvx73HfTq7x/J7+8d68NDycq5/wH66/USsZ9PEtHeQ5ff2P+u3/N7+G376+h9t3bsppvUnLb+3/4avsG+w32DfYT9gv8P+YP383v4bPpxfgfMrcH4Fzq/A+RU4v/m98c/2H1p+b/wNX2A/3f59yPr5l+nzz++Nv+Eb7DfYT7d/j2P7Lz75Afsd9gfr5/fG3/AF9ivs63v6MrX//N74Hnb05/rn8+tnfYf9gP18//Pc82nL741/3rcC+wL7FfYV9rPt/9zJyi29+iHWotFnvaP6IPX0uo3zuqB6RXVF9ez9KtbL8TJwNekN1R3VA9U7qg9ST6/ROK8LqldUV1RHs+poVh3NqqNZdTSrzmX1eXn3z+X9/vLq5vph+Y2XH/68/fK4v7t9ffv474//f7IU/g8=","file_map":{"26":{"source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"71":{"source":"use std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/Users/joshuatrujillo/Documents/github/zk/noir/keccak256/src/keccak256.nr"},"72":{"source":"use crate::keccak256::keccak256;\n\n#[export]\nfn test_keccak256_0() -> [u8; 32] {\n    keccak256([], 0)\n}\n\n#[export]\nfn test_keccak256_1(input: [u8; 1], len: u32) -> [u8; 32] {\n    keccak256(input, len)\n}\n\n#[export]\nfn test_keccak256_100(input: [u8; 100], len: u32) -> [u8; 32] {\n    keccak256(input, len)\n}\n\n// TODO: uncomment once keccak works with 135+ bytes\n//\n// #[export]\n// fn test_keccak256_135(input: [u8; 135], len: u32) -> [u8; 32] {\n//     keccak256(input, len)\n// }\n\n#[test]\nfn smoke_test() {\n    let input = [0xbd];\n    let result = [\n        0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19, 0x37,\n        0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca, 0x4b, 0x3b,\n        0x1a, 0xbf,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n\n#[test]\nfn hash_hello_world() {\n    let input = \"Hello world!\".as_bytes();\n    let result = [\n        0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n        0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n        0xea, 0xab,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n\n#[test]\nfn var_size_hash() {\n    let input = [\n        189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,\n        207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,\n    ];\n    let result = [\n        226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170, 219,\n        171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n    ];\n    assert_eq(keccak256(input, 13), result);\n}\n\n#[test]\nfn hash_longer_than_136_bytes() {\n    let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n        .as_bytes();\n    assert(input.len() > 136);\n\n    let result = [\n        0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n        0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55, 0xe4,\n        0x40,\n    ];\n    assert_eq(keccak256(input, input.len()), result);\n}\n","path":"/Users/joshuatrujillo/Documents/github/zk/noir/keccak256/src/tests.nr"}},"names":["test_keccak256_100"],"brillig_names":["test_keccak256_100"]}